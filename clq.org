#+TITLE: The =clq= interpreter

* Introduction

- We will build an interpreter called =clq= that supports gates and measurements
- All quantum gates are transmuted into a single linear operator that acts on
the Hilbert space of the wave function
- The language will have a Lisp-like syntax, and will use Common Lisp array syntax

* Interpreter

Our programming language will be model by an abstract machine of \(n\) qubits \(M_n\),
whose state will be given by a quantum state \(v\) and a \(n\)-bit measurement register.
We can consider that \(v \in \mathcal{C}^{2^n}\).

#+begin_src lisp :tangle yes
  (defstruct machine
    quantum-state
    measurement-register)
#+end_src

#+RESULTS:
: MACHINE

The remaining discussion assumes a basic quantum mechanics background. Let's define a \(n\)
qubit quantum state:

#+begin_src lisp :tangle yes
  (defun make-quantum-state (n)
    (let ((s (make-array (expt 2 n) :initial-element 0.0d0)))
      (setf (aref s 0) 1.0d0)
      s))
#+end_src

#+RESULTS:
: MAKE-QUANTUM-STATE

The above function will return the ket \(|00 \ldots 0\rangle\). It has a coefficient of one,
indicating that this is the only contribution to the initial state. Next, we define a function
to retrieve the number of qubits for a given Hilbert space size. This amounts to compute
the binary logarithm (number of bits in binary representation):

#+begin_src lisp :tangle yes
  (defun dimension-qubits (d)
    (- (integer-length d) 1))
#+end_src

#+RESULTS:
: DIMENSION-QUBITS

The propagation of the quantum system is then implemented using linear algebra operations:

#+begin_src lisp :tangle yes
  (defun apply-operator (unitary-operator ket)
    (let* ((oper-size (array-dimension unitary-operator 0))
  	 (new-ket (make-array oper-size :initial-element 0.0d0)))
      (dotimes (i oper-size)
        (let ((element 0.0d0))
  	(dotimes (j oper-size)
  	  (incf element (* (aref unitary-operator i j) (aref ket j))))
  	(setf (aref new-ket i) element)))
      (replace ket new-ket)))
#+end_src

#+RESULTS:
: APPLY-OPERATOR

#+begin_src lisp :tangle yes
  (defun compose-operator (unitary-left unitary-right)
    (let* ((m (array-dimension unitary-left 0))
  	 (n (array-dimension unitary-left 1))
  	 (p (array-dimension unitary-right 1))
  	 (unitary-new (make-array (list m p) :initial-element 0.0d0)))
      (dotimes (i m unitary-new)
        (dotimes (j p)
  	(let ((dot-prod 0.0d0))
  	  (dotimes (k n)
  	    (setf dot-prod (+ dot-prod
  			      (* (aref unitary-left i k)
  				 (aref unitary-right k j)))))
  	  (setf (aref unitary-new i j) dot-prod))))))
#+end_src

#+RESULTS:
: COMPOSE-OPERATOR

Provided the linear algebra machinery, we proceed to implement measurements. Again, domain knowledge
is needed here, in particular regarding the collapse of the wave function.

#+begin_src lisp :tangle yes
  (defun observe (machine)
    (let ((b (sample (machine-quantum-state machine))))
      (collapse (machine-quantum-state machine) b)
      (setf (machine-measurement-register machine) b)
      machine))
#+end_src

#+RESULTS:
: OBSERVE

In the code above the wave function is collapsed and saved in the register using the automatically
generated accessor of =machine=. The next section is more interesting, as it deals with the sampling
process. In statistical terms, we want to do is to sample a discrete random variable whose CDF is:

\begin{equation}
  F(q_j) = \sum_{i \le j}p(q_i)
\end{equation}

If we have \(U = \text{Uniform}(0, 1)\) then we can leverage this to sample:

\begin{equation}
  \text{Pr}(U \in (F(q_{j-1}), F(q_{j})]) = \text{Pr}(F(q_{j-1}) < U \le F(q_{j})) = F(q_{j}) - F(q_{j-1}) = p(q_{j})
\end{equation}

We can implement the above equations as follows:

#+begin_src lisp :tangle yes
  (defun sample (state)
    (let ((u (random 1.0d0)))
      (dotimes (i (length state))
        (decf u (expt (abs (aref state i)) 2))
        (when (minusp u) (return i)))))
#+end_src

#+RESULTS:
: SAMPLE

The collapse of the wave function implies this realization:

#+begin_src lisp :tangle yes
  (defun collapse (state qubit)
    (fill state 0.0d0)
    (setf (aref state qubit) 1.0d0))
#+end_src

#+RESULTS:
: COLLAPSE

Now we can proceed to define some gates. Let's start with the identity:

#+begin_src lisp :tangle yes
  (defparameter +I+ #2A((1 0)
  		      (0 1))
  	      "The identity gate.")
#+end_src

#+RESULTS:
: +I+

Then a function to apply a generic gate:

#+begin_src lisp :tangle yes
  (defun apply-gate (state unitary-operator qubits)
    (assert (= (length qubits)
  	     (dimension-qubits (array-dimension unitary-operator 0))))
    (if (= (length qubits) 1)
        (apply-singleq-gate state unitary-operator (first qubits))
        (apply-multiq-gate state unitary-operator qubits)))
#+end_src

#+RESULTS:
: APPLY-GATE

We need an implementation of the Kronecker product for generating multi-qubit gates:

#+begin_src lisp :tangle yes
  (defun kronecker-product (unitary-A unitary-B)
    (destructuring-bind (m n) (array-dimensions unitary-A)
      (destructuring-bind (p q) (array-dimensions unitary-B)
        (let ((kron-dot-unitary (make-array (list (* m p) (* n q)))))
  	(dotimes (i m kron-dot-unitary)
  	  (dotimes (j n)
  	    (let ((unitary-A-ij (aref unitary-A i j))
  		  (pointer-row (* i p))
  		  (pointer-col (* j q)))
  	      (dotimes (k p)
  		(dotimes (l q)
  		  (setf (aref kron-dot-unitary
  			      (+ pointer-row k) (+ pointer-col l))
  			(* unitary-A-ij (aref unitary-B k l))))))))))))
#+end_src

#+RESULTS:
: KRONECKER-PRODUCT

The discussion then focus on using the Kronecker product to generate the action of a
gate \(g\) on a qubit \(i\), or in a continuous range of qubits. This can be achieved with
the following lift operator:

\begin{equation}
 \text{lift}(g, i, n) = \mathcal{I} \otimes \ldots \otimes \mathcal{I} \otimes g \otimes \ldots \mathcal{I}
\end{equation}

where the first \(ldots\) covers \(n - i - 3\) factors and the second one \(i - 1\) factors.

#+begin_src lisp :tangle yes
  (defun kronecker-expt (unitary n)
    (cond
      ((< n 1) #2A((1)))
      ((= n 1) unitary)
      (t (kronecker-product (kronecker-expt unitary (- n 1)) unitary))))
#+end_src

#+RESULTS:
: KRONECKER-EXPT

With the above definition, the lift operator can be implemented as:

#+begin_src lisp :tangle yes
  (defun lift (unitary i n)
    (let ((left-factors (kronecker-expt +I+ (- n i (dimension-qubits
  						  (array-dimension unitary 0)))))
  	(right-factors (kronecker-expt +I+ i)))
      (kronecker-product left-factors
  		       (kronecker-product unitary right-factors))))
#+end_src

#+RESULTS:
: LIFT

Note that the above function accounts for multiple adjacent qubit gates. Multiple non-adjacent
qubit gates' actions are a bit trickier to handle. The idea is to generate a permutation matrix
\(\Pi\) that will set the qubits temporarily adjacent, apply the gate, and restores the initial order:

\begin{equation}
 \Pi^{-1}\text{lift}(g, 0, n)\Pi
\end{equation}

We then define the *SWAP* gate (the controlled version of this one is called Fredkin gate), which exchanges the states of two qubits:

#+begin_src lisp :tangle yes
  (defparameter +SWAP+ #2A((1 0 0 0)
  			 (0 0 1 0)
  			 (0 1 0 0)
  			 (0 0 0 1))
  	      "The SWAP gate")
#+end_src

#+RESULTS:
: +SWAP+

Using the fact that permutations can be decomposed into product of adjacent transpositions, we
can form a list of cons cells with the required transpositions as follows:

#+begin_src lisp :tangle yes
  (defun perm-as-trans (permutation)
    (let ((transpositions nil))
      (dotimes (natural (length permutation) (nreverse transpositions))
        (let ((permuted (elt permutation natural)))
  	(loop :while (< permuted natural) :do
  	  (setf permuted (elt permutation permuted)))
  	(when (> permuted natural)
  	  (push (cons natural permuted) transpositions))))))
#+end_src

#+RESULTS:
: PERM-AS-TRANS

Please note that in the above code the =permutation= indicates the index on the rearranged
array, not the rearranged array itself. This is in correspondence with Cauchy's two line
notation. The code above is tricky at times. Here is what it is doing:

1. We loop through the =natural= order of the set
2. For each target =permuted= index in =permutation=, if the index is larger than in the =natural=
   case we directly add a transposition. If it is smaller, we trace back the swaps needed to place
   index. This will eventually lead to a cycle (=permuted= equal =natural=) or a new transposition
   (=permuted= greater than =natural=)
3. The original code in the tutorial used a =cond= clause to avoid pushing to =transpositions=
   when no swap was needed. I streamlined this with a =when=

The next step is to cast the above transpositions as transpositions of adjacent qubits,
this time using a nice lambda:

#+begin_src lisp :tangle yes
  (defun trans-as-adjacent (transpositions)
    (mapcan (lambda (trans)
              (let ((start (car trans))
                    (end (cdr trans)))
                (if (= end (1+ start))
                    (list start)
                    (nconc (loop :for i :from start :below (1- end) :collect i)
  			 (loop :for i :from (1- end) :downto start :collect i)))))
            transpositions))
#+end_src

#+RESULTS:
: TRANS-AS-ADJACENT

Given all this procedures, we can write the core of the interpreter, which uses transpositions
to implement two qubit gates:

#+begin_src lisp :tangle yes
  (defun apply-singleq-gate (state unitary q)
    (apply-operator (lift unitary q (dimension-qubits (length state)))
                    state))

  (defun apply-multiq-gate (state unitary qubits)
    (let ((n (dimension-qubits (length state))))
      (let* ((unitary-init (lift unitary 0 n))
             (perm (append (reverse qubits)
                           (remove-if (lambda (i) (member i qubits))
                                      (loop for i :below n :collect i))))
             (trans (trans-as-adjacent (perm-as-trans perm))))
        (if trans
            (let ((to->from (reduce #'compose-operator trans
                                    :key (lambda (i) (lift +swap+ i n))))
                  (from->to (reduce #'compose-operator (reverse trans)
                                    :key (lambda (i) (lift +swap+ i n)))))
              (apply-operator (compose-operator to->from
                                                (compose-operator unitary-init from->to))
                              state))
            (apply-operator unitary-init state)))))
#+end_src

#+RESULTS:
: APPLY-MULTIQ-GATE

We can put then everything together in the driving loop of the interpreter:

#+begin_src lisp :tangle yes
  (defun clq (qprog machine)
    (loop :for (instruction . parameters) :in qprog
          :do (ecase instruction
                ((GATE)
                 (destructuring-bind (gate &rest qubits) parameters
                   (apply-gate (machine-quantum-state machine) gate qubits)))
                ((MEASURE)
                 (observe machine)))
          :finally (return machine)))
#+end_src

#+RESULTS:
: CLQ

* Example applications

We will start with some basic applications that were also present in the original tutorial, and finish with
a full example of the quantum subroutine of Shor's algorithm for the minimal use case, which is the factorization
of the number 15. We will start by defining some quantum gates that will be used in the examples:

#+begin_src lisp :tangle yes
  (defparameter +X+ #2A((0 1)
  		      (1 0))
  	      "Pauli X (NOT) gate")

  (defparameter +CNOT+ #2A((1 0 0 0)
                           (0 1 0 0)
                           (0 0 0 1)
                           (0 0 1 0))
  	      "Controlled NOT (CNOT) gate")

  (defparameter +H+
    (make-array '(2 2)
  	      :initial-contents
  	      (let ((s (/ (sqrt 2))))
                  (list (list s s)
  		      (list s (- s)))))
    "Hadamard gate")

  (defun cphase (angle)
    "Controlled phase (CPHASE) gate"
    (make-array '(4 4) :initial-contents `((1 0 0 0)
                                           (0 1 0 0)
                                           (0 0 1 0)
                                           (0 0 0 ,(cis angle)))))

  (defparameter +TOFFOLI+
    (let ((matrix (make-array '(8 8)
    			    :element-type 'double-float
    			    :initial-element 0.0d0)))
      (dotimes (i 8)
        (setf (aref matrix i i) 1d0))
      (setf (aref matrix 6 6) 0.0d0)
      (setf (aref matrix 6 7) 1.0d0)
      (setf (aref matrix 7 7) 0.0d0)
      (setf (aref matrix 7 6) 1.0d0)
      matrix)
    "Controlled-controlled NOT (CCNOT) or Toffoli gate")
#+end_src

#+RESULTS:
: +TOFFOLI+

** Bell states

Bell states or [[https://en.wikipedia.org/wiki/Bell_state][EPR pairs]]  are the simplest example of quantum entanglement. A =clq= definition of them is:

#+begin_src lisp :tangle yes
  (defun bell-state (p q)
    `((GATE ,+H+ ,p)
      (GATE ,+CNOT+ ,p ,q)))
#+end_src

#+RESULTS:
: BELL-STATE

We can print the state vector directly:

#+begin_src lisp :tangle yes
  (clq (bell-state 0 1)
       (make-machine :quantum-state (make-quantum-state 2)
                     :measurement-register 0))
#+end_src

#+RESULTS:
: #S(MACHINE
:    :QUANTUM-STATE #(0.7071067690849304d0 0.0d0 0.0d0 0.7071067690849304d0)
:    :MEASUREMENT-REGISTER 0)


** Quantum Fourier transform

The quantum Fourier transform ([[https://en.wikipedia.org/wiki/Quantum_Fourier_transform][QFT]]) is a basic ingredient of many quantum circuits, including quantum phase estimation
and the quantum subroutine of Shor's algorithm. It is the quantum analogous of the discrete Fourier transform. Below
we implement the QFT and its inverse without swaps, which can be easily added:

#+begin_src lisp :tangle yes
  (defun qft (qubits)
    (labels ((bit-reversal (qubits)
               (let ((n (length qubits)))
                 (if (< n 2)
                     nil
                     (loop :repeat (floor n 2)
                           :for qs :in qubits
                           :for qe :in (reverse qubits)
                           :collect `(GATE ,+swap+ ,qs ,qe)))))
             (%qft (qubits)
               (destructuring-bind (q . qs) qubits
                 (if (null qs)
                     (list `(GATE ,+H+ ,q))
                     (let ((cR (loop :with n := (1+ (length qs))
                                     :for i :from 1
                                     :for qi :in qs
                                     :for angle := (/ pi (expt 2 (- n i)))
                                     :collect `(GATE ,(cphase angle) ,q ,qi))))
                       (append
                        (qft qs)
                        cR
                        (list `(GATE ,+H+ ,q))))))))
      (append (%qft qubits) (bit-reversal qubits))))

  (defun qft-dagger (n)
    (let ((gates nil))
      ;; Apply the controlled phase gates and Hadamard gates.
      (loop :for j :from 0 :below n :do
        (progn
          (loop :for m :from 0 :below j :do
            (push `(GATE ,(cphase (- (/ pi (expt 2 (- j m))))) ,m ,j) gates))
          (push `(GATE ,+H+ ,j) gates)))
      gates))
#+end_src

#+RESULTS:
: QFT-DAGGER

For the three qubit case, the QFT circuit is:

#+begin_src lisp :tangle yes
  (qft '(0 1 2))
#+end_src

#+RESULTS:
#+begin_example
((GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 2)
 (GATE
  #2A((1 0 0 0) (0 1 0 0) (0 0 1 0) (0 0 0 #C(6.123233995736766d-17 1.0d0))) 1
  2)
 (GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 1)
 (GATE #2A((1 0 0 0) (0 0 1 0) (0 1 0 0) (0 0 0 1)) 1 2)
 (GATE
  #2A((1 0 0 0)
      (0 1 0 0)
      (0 0 1 0)
      (0 0 0 #C(0.7071067811865476d0 0.7071067811865475d0)))
  0 1)
 (GATE
  #2A((1 0 0 0) (0 1 0 0) (0 0 1 0) (0 0 0 #C(6.123233995736766d-17 1.0d0))) 0
  2)
 (GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 0)
 (GATE #2A((1 0 0 0) (0 0 1 0) (0 1 0 0) (0 0 0 1)) 0 2))
#+end_example

And the QFT dagger is: 

#+begin_src lisp :tangle yes
  (qft-dagger 3)
#+end_src

#+RESULTS:
#+begin_example
((GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 2)
 (GATE
  #2A((1 0 0 0) (0 1 0 0) (0 0 1 0) (0 0 0 #C(6.123233995736766d-17 -1.0d0))) 1
  2)
 (GATE
  #2A((1 0 0 0)
      (0 1 0 0)
      (0 0 1 0)
      (0 0 0 #C(0.7071067811865476d0 -0.7071067811865475d0)))
  0 2)
 (GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 1)
 (GATE
  #2A((1 0 0 0) (0 1 0 0) (0 0 1 0) (0 0 0 #C(6.123233995736766d-17 -1.0d0))) 0
  1)
 (GATE #2A((0.70710677 0.70710677) (0.70710677 -0.70710677)) 0))
#+end_example

Finally, we can print the state vector of the QFT to compare with the classical analogous if desired:

#+begin_src lisp :tangle yes
  (clq (qft '(0 1 2))
       (make-machine :quantum-state (make-quantum-state 3)
                     :measurement-register 0))
#+end_src

#+RESULTS:
#+begin_example
#S(MACHINE
   :QUANTUM-STATE #(#C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0)
                    #C(0.3535533724408484d0 0.0d0))
   :MEASUREMENT-REGISTER 0)
#+end_example

** Quantum subroutine of Shor's algorithm

[[https://en.wikipedia.org/wiki/Shor%27s_algorithm][Shor's algorithm]] is a quantum procedure that can find the prime factorization of an integer exponentially faster than
any classical procedure. The moment we reach a reasonable noise level in our quantum devices, this will be a killer
application. Here we present a simplified (compiled) circuit for finding the prime factorization of \(N=15\) using the
base \(a=11\). The circuit was adapted from from reference [[https://arxiv.org/abs/1804.03719][1804.03719]], and the massive simplification is due to the fact
that we use information about the modular exponentiation procedure to reduce the amount of gates. The circuit is the following:

#+begin_src lisp :tangle yes
  (defun shor-fifteen ()
    `((GATE ,+H+ 0)
      (GATE ,+H+ 1)
      (GATE ,+H+ 2)
      (GATE ,+CNOT+ 2 3)
      (GATE ,+CNOT+ 2 4)
      (GATE ,+H+ 1)
      (GATE ,(cphase (/ pi 2)) 1 0)
      (GATE ,+H+ 0)
      (GATE ,(cphase (/ pi 4)) 1 2)
      (GATE ,(cphase (/ pi 2)) 0 2)
      (GATE ,+H+ 2)
      (MEASURE)))
#+end_src

#+RESULTS:
: SHOR-FIFTEEN

In order to interpret the results of the measurement, we need to define two auxiliary procedures. The first one records the counts for each component
of the state vector, and the second one computes the marginal counts for the first three qubits. This is just a hack the we use to simulate partial measurements.

#+begin_src lisp :tangle yes
  (defun counts (realizations qubits q-circuit &rest args)
    (let* ((hilbert (expt 2 qubits))
           (results (make-array hilbert :initial-element 0)))
      (dotimes (i realizations results)
        (let ((state (machine-quantum-state
                      (clq (apply q-circuit args) 
                           (make-machine :quantum-state (make-quantum-state qubits)
                                         :measurement-register 0)))))
          (dotimes (j hilbert)
            (when (> (aref state j) 0) (incf (aref results j))))))))

  (defun counts-control (cnt n-control)
    (let* ((bits-control (expt 2 n-control))
  	 (result (make-array bits-control :initial-element 0)))
      (loop :for i :from 0 :below (length cnt) :by bits-control
            :do
  	     (loop :for j :from 0 :below bits-control
                     :do (incf (aref result j) (aref cnt (+ i j)))))
      result))
#+end_src

#+RESULTS:
: COUNTS-CONTROL

Then we compute the number of counts for the control qubits, which we store in a three-bit classical register. We trace out the last two bits
to get the marginal probabilities:

#+NAME: simulation-results
#+begin_src lisp :tangle yes
  (counts-control (counts 1024 5 #'shor-fifteen) 3)
#+end_src

#+RESULTS: simulation-results
| 494 | 0 | 0 | 0 | 530 | 0 | 0 | 0 |

The first peak corresponds to the =000= string which yields a trivial period. The second peak is the right answer,
=100= corresponds to the number 4 in decimal.

The obtained results nicely match those obtained with IBM's Qiskit Aer simulator, and those obtained with
a real quantum computer (IBM's [[https://www.ibm.com/quantum/blog/127-qubit-quantum-processor-eagle][Eagle QPU]]). The simulation and the quantum experiment are reported in
the accompanying [[./ibm_eagle/shor_factorize_fifteen.ipynb][notebook]], which is also in this repository.

*** Post-processing of the results:

We know that the circuit's counts peak at a number that is proportional to \(\frac{2^n}{r}\), where \(n\) is
the number of qubits in the control register and \(r\) is the period of the modular exponentiation function.
We have then:

\begin{equation}
   r = \frac{2^3}{4} = 2
\end{equation}

We know that for a target number \(N\) and a base \(a\):

\begin{equation}
   N = \prod_i=0^1 \text{gcd}(a^{\frac{r}{2}} + (-1)^i, N)
\end{equation}

The previous ideas are crystallized in this procedure:

#+begin_src lisp :tangle yes
  (defun factorization (control-state N a n-control)
    (let* ((counts (cdr control-state))
  	 (max-val (1+ (position (reduce 'max counts) counts)))
  	 (r (/ (expt 2 n-control) max-val)))
      (list (gcd (1+ (expt a (/ r 2))) N)
            (gcd (1- (expt a (/ r 2))) N))))
#+end_src

#+RESULTS:
: FACTORIZATION

The factorization of 15 using 11 as a base and using 3 control qubits is then:

#+begin_src lisp :tangle yes :var register-counts=simulation-results
  (factorization register-counts 15 11 3)
#+end_src

#+RESULTS:
| 3 | 5 |
